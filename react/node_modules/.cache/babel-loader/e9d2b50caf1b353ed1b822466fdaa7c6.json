{"ast":null,"code":"// Generated by CoffeeScript 1.10.0\nvar BRUTEFORCE_CARDINALITY, MIN_GUESSES_BEFORE_GROWING_SEQUENCE, MIN_SUBMATCH_GUESSES_MULTI_CHAR, MIN_SUBMATCH_GUESSES_SINGLE_CHAR, adjacency_graphs, calc_average_degree, k, scoring, v;\nadjacency_graphs = require('./adjacency_graphs');\ncalc_average_degree = function (graph) {\n  var average, k, key, n, neighbors, v;\n  average = 0;\n  for (key in graph) {\n    neighbors = graph[key];\n    average += function () {\n      var len, o, results;\n      results = [];\n      for (o = 0, len = neighbors.length; o < len; o++) {\n        n = neighbors[o];\n        if (n) {\n          results.push(n);\n        }\n      }\n      return results;\n    }().length;\n  }\n  average /= function () {\n    var results;\n    results = [];\n    for (k in graph) {\n      v = graph[k];\n      results.push(k);\n    }\n    return results;\n  }().length;\n  return average;\n};\nBRUTEFORCE_CARDINALITY = 10;\nMIN_GUESSES_BEFORE_GROWING_SEQUENCE = 10000;\nMIN_SUBMATCH_GUESSES_SINGLE_CHAR = 10;\nMIN_SUBMATCH_GUESSES_MULTI_CHAR = 50;\nscoring = {\n  nCk: function (n, k) {\n    var d, o, r, ref;\n    if (k > n) {\n      return 0;\n    }\n    if (k === 0) {\n      return 1;\n    }\n    r = 1;\n    for (d = o = 1, ref = k; 1 <= ref ? o <= ref : o >= ref; d = 1 <= ref ? ++o : --o) {\n      r *= n;\n      r /= d;\n      n -= 1;\n    }\n    return r;\n  },\n  log10: function (n) {\n    return Math.log(n) / Math.log(10);\n  },\n  log2: function (n) {\n    return Math.log(n) / Math.log(2);\n  },\n  factorial: function (n) {\n    var f, i, o, ref;\n    if (n < 2) {\n      return 1;\n    }\n    f = 1;\n    for (i = o = 2, ref = n; 2 <= ref ? o <= ref : o >= ref; i = 2 <= ref ? ++o : --o) {\n      f *= i;\n    }\n    return f;\n  },\n  most_guessable_match_sequence: function (password, matches, _exclude_additive) {\n    var _, bruteforce_update, guesses, k, l, len, len1, len2, lst, m, make_bruteforce_match, matches_by_j, n, o, optimal, optimal_l, optimal_match_sequence, q, ref, ref1, u, unwind, update, w;\n    if (_exclude_additive == null) {\n      _exclude_additive = false;\n    }\n    n = password.length;\n    matches_by_j = function () {\n      var o, ref, results;\n      results = [];\n      for (_ = o = 0, ref = n; 0 <= ref ? o < ref : o > ref; _ = 0 <= ref ? ++o : --o) {\n        results.push([]);\n      }\n      return results;\n    }();\n    for (o = 0, len = matches.length; o < len; o++) {\n      m = matches[o];\n      matches_by_j[m.j].push(m);\n    }\n    for (q = 0, len1 = matches_by_j.length; q < len1; q++) {\n      lst = matches_by_j[q];\n      lst.sort(function (m1, m2) {\n        return m1.i - m2.i;\n      });\n    }\n    optimal = {\n      m: function () {\n        var ref, results, u;\n        results = [];\n        for (_ = u = 0, ref = n; 0 <= ref ? u < ref : u > ref; _ = 0 <= ref ? ++u : --u) {\n          results.push({});\n        }\n        return results;\n      }(),\n      pi: function () {\n        var ref, results, u;\n        results = [];\n        for (_ = u = 0, ref = n; 0 <= ref ? u < ref : u > ref; _ = 0 <= ref ? ++u : --u) {\n          results.push({});\n        }\n        return results;\n      }(),\n      g: function () {\n        var ref, results, u;\n        results = [];\n        for (_ = u = 0, ref = n; 0 <= ref ? u < ref : u > ref; _ = 0 <= ref ? ++u : --u) {\n          results.push({});\n        }\n        return results;\n      }()\n    };\n    update = function (_this) {\n      return function (m, l) {\n        var competing_g, competing_l, g, k, pi, ref;\n        k = m.j;\n        pi = _this.estimate_guesses(m, password);\n        if (l > 1) {\n          pi *= optimal.pi[m.i - 1][l - 1];\n        }\n        g = _this.factorial(l) * pi;\n        if (!_exclude_additive) {\n          g += Math.pow(MIN_GUESSES_BEFORE_GROWING_SEQUENCE, l - 1);\n        }\n        ref = optimal.g[k];\n        for (competing_l in ref) {\n          competing_g = ref[competing_l];\n          if (competing_l > l) {\n            continue;\n          }\n          if (competing_g <= g) {\n            return;\n          }\n        }\n        optimal.g[k][l] = g;\n        optimal.m[k][l] = m;\n        return optimal.pi[k][l] = pi;\n      };\n    }(this);\n    bruteforce_update = function (_this) {\n      return function (k) {\n        var i, l, last_m, ref, results, u;\n        m = make_bruteforce_match(0, k);\n        update(m, 1);\n        results = [];\n        for (i = u = 1, ref = k; 1 <= ref ? u <= ref : u >= ref; i = 1 <= ref ? ++u : --u) {\n          m = make_bruteforce_match(i, k);\n          results.push(function () {\n            var ref1, results1;\n            ref1 = optimal.m[i - 1];\n            results1 = [];\n            for (l in ref1) {\n              last_m = ref1[l];\n              l = parseInt(l);\n              if (last_m.pattern === 'bruteforce') {\n                continue;\n              }\n              results1.push(update(m, l + 1));\n            }\n            return results1;\n          }());\n        }\n        return results;\n      };\n    }(this);\n    make_bruteforce_match = function (_this) {\n      return function (i, j) {\n        return {\n          pattern: 'bruteforce',\n          token: password.slice(i, +j + 1 || 9e9),\n          i: i,\n          j: j\n        };\n      };\n    }(this);\n    unwind = function (_this) {\n      return function (n) {\n        var candidate_g, candidate_l, g, k, l, optimal_match_sequence, ref;\n        optimal_match_sequence = [];\n        k = n - 1;\n        l = void 0;\n        g = Infinity;\n        ref = optimal.g[k];\n        for (candidate_l in ref) {\n          candidate_g = ref[candidate_l];\n          if (candidate_g < g) {\n            l = candidate_l;\n            g = candidate_g;\n          }\n        }\n        while (k >= 0) {\n          m = optimal.m[k][l];\n          optimal_match_sequence.unshift(m);\n          k = m.i - 1;\n          l--;\n        }\n        return optimal_match_sequence;\n      };\n    }(this);\n    for (k = u = 0, ref = n; 0 <= ref ? u < ref : u > ref; k = 0 <= ref ? ++u : --u) {\n      ref1 = matches_by_j[k];\n      for (w = 0, len2 = ref1.length; w < len2; w++) {\n        m = ref1[w];\n        if (m.i > 0) {\n          for (l in optimal.m[m.i - 1]) {\n            l = parseInt(l);\n            update(m, l + 1);\n          }\n        } else {\n          update(m, 1);\n        }\n      }\n      bruteforce_update(k);\n    }\n    optimal_match_sequence = unwind(n);\n    optimal_l = optimal_match_sequence.length;\n    if (password.length === 0) {\n      guesses = 1;\n    } else {\n      guesses = optimal.g[n - 1][optimal_l];\n    }\n    return {\n      password: password,\n      guesses: guesses,\n      guesses_log10: this.log10(guesses),\n      sequence: optimal_match_sequence\n    };\n  },\n  estimate_guesses: function (match, password) {\n    var estimation_functions, guesses, min_guesses;\n    if (match.guesses != null) {\n      return match.guesses;\n    }\n    min_guesses = 1;\n    if (match.token.length < password.length) {\n      min_guesses = match.token.length === 1 ? MIN_SUBMATCH_GUESSES_SINGLE_CHAR : MIN_SUBMATCH_GUESSES_MULTI_CHAR;\n    }\n    estimation_functions = {\n      bruteforce: this.bruteforce_guesses,\n      dictionary: this.dictionary_guesses,\n      spatial: this.spatial_guesses,\n      repeat: this.repeat_guesses,\n      sequence: this.sequence_guesses,\n      regex: this.regex_guesses,\n      date: this.date_guesses\n    };\n    guesses = estimation_functions[match.pattern].call(this, match);\n    match.guesses = Math.max(guesses, min_guesses);\n    match.guesses_log10 = this.log10(match.guesses);\n    return match.guesses;\n  },\n  bruteforce_guesses: function (match) {\n    var guesses, min_guesses;\n    guesses = Math.pow(BRUTEFORCE_CARDINALITY, match.token.length);\n    if (guesses === Number.POSITIVE_INFINITY) {\n      guesses = Number.MAX_VALUE;\n    }\n    min_guesses = match.token.length === 1 ? MIN_SUBMATCH_GUESSES_SINGLE_CHAR + 1 : MIN_SUBMATCH_GUESSES_MULTI_CHAR + 1;\n    return Math.max(guesses, min_guesses);\n  },\n  repeat_guesses: function (match) {\n    return match.base_guesses * match.repeat_count;\n  },\n  sequence_guesses: function (match) {\n    var base_guesses, first_chr;\n    first_chr = match.token.charAt(0);\n    if (first_chr === 'a' || first_chr === 'A' || first_chr === 'z' || first_chr === 'Z' || first_chr === '0' || first_chr === '1' || first_chr === '9') {\n      base_guesses = 4;\n    } else {\n      if (first_chr.match(/\\d/)) {\n        base_guesses = 10;\n      } else {\n        base_guesses = 26;\n      }\n    }\n    if (!match.ascending) {\n      base_guesses *= 2;\n    }\n    return base_guesses * match.token.length;\n  },\n  MIN_YEAR_SPACE: 20,\n  REFERENCE_YEAR: new Date().getFullYear(),\n  regex_guesses: function (match) {\n    var char_class_bases, year_space;\n    char_class_bases = {\n      alpha_lower: 26,\n      alpha_upper: 26,\n      alpha: 52,\n      alphanumeric: 62,\n      digits: 10,\n      symbols: 33\n    };\n    if (match.regex_name in char_class_bases) {\n      return Math.pow(char_class_bases[match.regex_name], match.token.length);\n    } else {\n      switch (match.regex_name) {\n        case 'recent_year':\n          year_space = Math.abs(parseInt(match.regex_match[0]) - this.REFERENCE_YEAR);\n          year_space = Math.max(year_space, this.MIN_YEAR_SPACE);\n          return year_space;\n      }\n    }\n  },\n  date_guesses: function (match) {\n    var guesses, year_space;\n    year_space = Math.max(Math.abs(match.year - this.REFERENCE_YEAR), this.MIN_YEAR_SPACE);\n    guesses = year_space * 365;\n    if (match.separator) {\n      guesses *= 4;\n    }\n    return guesses;\n  },\n  KEYBOARD_AVERAGE_DEGREE: calc_average_degree(adjacency_graphs.qwerty),\n  KEYPAD_AVERAGE_DEGREE: calc_average_degree(adjacency_graphs.keypad),\n  KEYBOARD_STARTING_POSITIONS: function () {\n    var ref, results;\n    ref = adjacency_graphs.qwerty;\n    results = [];\n    for (k in ref) {\n      v = ref[k];\n      results.push(k);\n    }\n    return results;\n  }().length,\n  KEYPAD_STARTING_POSITIONS: function () {\n    var ref, results;\n    ref = adjacency_graphs.keypad;\n    results = [];\n    for (k in ref) {\n      v = ref[k];\n      results.push(k);\n    }\n    return results;\n  }().length,\n  spatial_guesses: function (match) {\n    var L, S, U, d, guesses, i, j, o, possible_turns, q, ref, ref1, ref2, ref3, s, shifted_variations, t, u;\n    if ((ref = match.graph) === 'qwerty' || ref === 'dvorak') {\n      s = this.KEYBOARD_STARTING_POSITIONS;\n      d = this.KEYBOARD_AVERAGE_DEGREE;\n    } else {\n      s = this.KEYPAD_STARTING_POSITIONS;\n      d = this.KEYPAD_AVERAGE_DEGREE;\n    }\n    guesses = 0;\n    L = match.token.length;\n    t = match.turns;\n    for (i = o = 2, ref1 = L; 2 <= ref1 ? o <= ref1 : o >= ref1; i = 2 <= ref1 ? ++o : --o) {\n      possible_turns = Math.min(t, i - 1);\n      for (j = q = 1, ref2 = possible_turns; 1 <= ref2 ? q <= ref2 : q >= ref2; j = 1 <= ref2 ? ++q : --q) {\n        guesses += this.nCk(i - 1, j - 1) * s * Math.pow(d, j);\n      }\n    }\n    if (match.shifted_count) {\n      S = match.shifted_count;\n      U = match.token.length - match.shifted_count;\n      if (S === 0 || U === 0) {\n        guesses *= 2;\n      } else {\n        shifted_variations = 0;\n        for (i = u = 1, ref3 = Math.min(S, U); 1 <= ref3 ? u <= ref3 : u >= ref3; i = 1 <= ref3 ? ++u : --u) {\n          shifted_variations += this.nCk(S + U, i);\n        }\n        guesses *= shifted_variations;\n      }\n    }\n    return guesses;\n  },\n  dictionary_guesses: function (match) {\n    var reversed_variations;\n    match.base_guesses = match.rank;\n    match.uppercase_variations = this.uppercase_variations(match);\n    match.l33t_variations = this.l33t_variations(match);\n    reversed_variations = match.reversed && 2 || 1;\n    return match.base_guesses * match.uppercase_variations * match.l33t_variations * reversed_variations;\n  },\n  START_UPPER: /^[A-Z][^A-Z]+$/,\n  END_UPPER: /^[^A-Z]+[A-Z]$/,\n  ALL_UPPER: /^[^a-z]+$/,\n  ALL_LOWER: /^[^A-Z]+$/,\n  uppercase_variations: function (match) {\n    var L, U, chr, i, len, o, q, ref, ref1, regex, variations, word;\n    word = match.token;\n    if (word.match(this.ALL_LOWER) || word.toLowerCase() === word) {\n      return 1;\n    }\n    ref = [this.START_UPPER, this.END_UPPER, this.ALL_UPPER];\n    for (o = 0, len = ref.length; o < len; o++) {\n      regex = ref[o];\n      if (word.match(regex)) {\n        return 2;\n      }\n    }\n    U = function () {\n      var len1, q, ref1, results;\n      ref1 = word.split('');\n      results = [];\n      for (q = 0, len1 = ref1.length; q < len1; q++) {\n        chr = ref1[q];\n        if (chr.match(/[A-Z]/)) {\n          results.push(chr);\n        }\n      }\n      return results;\n    }().length;\n    L = function () {\n      var len1, q, ref1, results;\n      ref1 = word.split('');\n      results = [];\n      for (q = 0, len1 = ref1.length; q < len1; q++) {\n        chr = ref1[q];\n        if (chr.match(/[a-z]/)) {\n          results.push(chr);\n        }\n      }\n      return results;\n    }().length;\n    variations = 0;\n    for (i = q = 1, ref1 = Math.min(U, L); 1 <= ref1 ? q <= ref1 : q >= ref1; i = 1 <= ref1 ? ++q : --q) {\n      variations += this.nCk(U + L, i);\n    }\n    return variations;\n  },\n  l33t_variations: function (match) {\n    var S, U, chr, chrs, i, o, p, possibilities, ref, ref1, subbed, unsubbed, variations;\n    if (!match.l33t) {\n      return 1;\n    }\n    variations = 1;\n    ref = match.sub;\n    for (subbed in ref) {\n      unsubbed = ref[subbed];\n      chrs = match.token.toLowerCase().split('');\n      S = function () {\n        var len, o, results;\n        results = [];\n        for (o = 0, len = chrs.length; o < len; o++) {\n          chr = chrs[o];\n          if (chr === subbed) {\n            results.push(chr);\n          }\n        }\n        return results;\n      }().length;\n      U = function () {\n        var len, o, results;\n        results = [];\n        for (o = 0, len = chrs.length; o < len; o++) {\n          chr = chrs[o];\n          if (chr === unsubbed) {\n            results.push(chr);\n          }\n        }\n        return results;\n      }().length;\n      if (S === 0 || U === 0) {\n        variations *= 2;\n      } else {\n        p = Math.min(U, S);\n        possibilities = 0;\n        for (i = o = 1, ref1 = p; 1 <= ref1 ? o <= ref1 : o >= ref1; i = 1 <= ref1 ? ++o : --o) {\n          possibilities += this.nCk(U + S, i);\n        }\n        variations *= possibilities;\n      }\n    }\n    return variations;\n  }\n};\nmodule.exports = scoring;","map":{"version":3,"names":["BRUTEFORCE_CARDINALITY","MIN_GUESSES_BEFORE_GROWING_SEQUENCE","MIN_SUBMATCH_GUESSES_MULTI_CHAR","MIN_SUBMATCH_GUESSES_SINGLE_CHAR","adjacency_graphs","calc_average_degree","k","scoring","v","require","graph","average","key","n","neighbors","results","o","len","length","nCk","d","r","ref","log10","Math","log","log2","factorial","f","i","most_guessable_match_sequence","password","matches","_exclude_additive","_","bruteforce_update","guesses","l","len1","len2","lst","m","make_bruteforce_match","matches_by_j","optimal","optimal_l","optimal_match_sequence","q","ref1","u","unwind","update","w","j","push","sort","m1","m2","pi","g","_this","competing_g","competing_l","estimate_guesses","pow","last_m","results1","parseInt","pattern","token","slice","candidate_g","candidate_l","Infinity","unshift","guesses_log10","sequence","match","estimation_functions","min_guesses","bruteforce","bruteforce_guesses","dictionary","dictionary_guesses","spatial","spatial_guesses","repeat","repeat_guesses","sequence_guesses","regex","regex_guesses","date","date_guesses","call","max","Number","POSITIVE_INFINITY","MAX_VALUE","base_guesses","repeat_count","first_chr","charAt","ascending","MIN_YEAR_SPACE","REFERENCE_YEAR","Date","getFullYear","char_class_bases","year_space","alpha_lower","alpha_upper","alpha","alphanumeric","digits","symbols","regex_name","abs","regex_match","year","separator","KEYBOARD_AVERAGE_DEGREE","qwerty","KEYPAD_AVERAGE_DEGREE","keypad","KEYBOARD_STARTING_POSITIONS","KEYPAD_STARTING_POSITIONS","L","S","U","possible_turns","ref2","ref3","s","shifted_variations","t","turns","min","shifted_count","reversed_variations","rank","uppercase_variations","l33t_variations","reversed","START_UPPER","END_UPPER","ALL_UPPER","ALL_LOWER","chr","variations","word","toLowerCase","split","chrs","p","possibilities","subbed","unsubbed","l33t","sub","module","exports"],"sources":["../src/scoring.coffee"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script"}